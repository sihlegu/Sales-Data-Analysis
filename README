
### **Sales Data Analysis with Bar Charts**


#### **Project Overview**
This project analyzes a company's sales data to gain insights into the performance of different products and sales regions. The dataset includes information about sales transactions, and the goal is to aggregate the data and present insights through bar charts. These visualizations help in understanding which products are top-sellers, which regions have the highest sales, and the overall performance over time.

#### **Dataset**
The dataset consists of the following columns:
- **Transaction ID**: Unique identifier for each transaction.
- **Product Name**: Name of the product sold.
- **Sales Region**: The region where the sale took place (e.g., North, South, East, West).
- **Sales Amount**: The total amount for the transaction.
- **Date**: Date of the transaction.

#### **Key Features of the Project**
- **Data Cleaning**: Handle missing values and potential outliers.
- **Data Aggregation**: Aggregate sales data by product and region.
- **Visualization**: Create bar charts to show the total sales per product, per region, and over time.

---

### **Project Structure**

```plaintext
sales-data-analysis/
├── data/
│   └── sales_data.csv
├── scripts/
│   ├── data_cleaning.py
│   ├── data_analysis.py
│   └── visualize_sales.py
├── README.md
└── requirements.txt
```

---

### **README.md**:

```markdown
# Sales Data Analysis with Bar Charts

## Project Overview
This project involves analyzing sales data to understand the performance of products and regions. I used data aggregation and visualized the results using bar charts to gain insights into the business's sales trends.

## Dataset
The dataset consists of sales transactions with the following columns:
- `Transaction ID`: Unique identifier for each transaction.
- `Product Name`: Name of the product sold.
- `Sales Region`: Region of the sale (e.g., North, South, East, West).
- `Sales Amount`: Amount of the transaction.
- `Date`: Date of the transaction.

## Features
- Data cleaning and preprocessing.
- Aggregation of sales data by product and region.
- Bar charts to visualize sales trends over time, by product, and by region.

## Project Structure
- `data/`: Contains the sales dataset (`sales_data.csv`).
- `scripts/`: Contains Python scripts for data cleaning, analysis, and visualization.
- `requirements.txt`: Lists the dependencies needed to run the project.

## Steps to Run the Project

1. Clone the repository:
    ```bash
    git clone https://github.com/yourusername/sales-data-analysis.git
    cd sales-data-analysis
    ```

2. Install dependencies:
    ```bash
    pip install -r requirements.txt
    ```

3. Run the data analysis script:
    ```bash
    python scripts/data_analysis.py
    ```

4. Run the visualization script:
    ```bash
    python scripts/visualize_sales.py
    ```

## Requirements
- Python 3.x
- pandas
- matplotlib
- seaborn
```

---

### **requirements.txt**:

```plaintext
pandas
matplotlib
seaborn
```

---

### **data_cleaning.py** (in `scripts` folder):

```python
import pandas as pd

def clean_data(data_path):
    # Load the data
    df = pd.read_csv(data_path)
    
    # Handle missing values
    df.fillna({'Sales Amount': df['Sales Amount'].mean()}, inplace=True)  # Fill missing sales values with mean
    
    # Convert date to datetime format
    df['Date'] = pd.to_datetime(df['Date'])
    
    return df

# Example usage:
# df = clean_data('data/sales_data.csv')
# print(df.head())
```

---

### **data_analysis.py** (in `scripts` folder):

```python
import pandas as pd
from scripts.data_cleaning import clean_data

# Load and clean the data
df = clean_data('data/sales_data.csv')

# Aggregate sales by product
product_sales = df.groupby('Product Name')['Sales Amount'].sum().reset_index()

# Aggregate sales by region
region_sales = df.groupby('Sales Region')['Sales Amount'].sum().reset_index()

# Aggregate sales by month
df['Month'] = df['Date'].dt.to_period('M')
monthly_sales = df.groupby('Month')['Sales Amount'].sum().reset_index()

# Example usage:
# print(product_sales.head())
# print(region_sales.head())
# print(monthly_sales.head())
```

---

### **visualize_sales.py** (in `scripts` folder):

```python
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scripts.data_analysis import product_sales, region_sales, monthly_sales

# Set up seaborn style
sns.set(style="whitegrid")

# Bar chart for total sales by product
plt.figure(figsize=(10, 6))
sns.barplot(x='Sales Amount', y='Product Name', data=product_sales, palette='viridis')
plt.title('Total Sales by Product')
plt.xlabel('Total Sales Amount')
plt.ylabel('Product Name')
plt.show()

# Bar chart for total sales by region
plt.figure(figsize=(10, 6))
sns.barplot(x='Sales Amount', y='Sales Region', data=region_sales, palette='viridis')
plt.title('Total Sales by Region')
plt.xlabel('Total Sales Amount')
plt.ylabel('Sales Region')
plt.show()

# Bar chart for monthly sales trend
plt.figure(figsize=(10, 6))
sns.barplot(x='Month', y='Sales Amount', data=monthly_sales, palette='viridis')
plt.title('Sales Trend by Month')
plt.xlabel('Month')
plt.ylabel('Total Sales Amount')
plt.xticks(rotation=45)
plt.show()
```

---

### **Sample Dataset (`sales_data.csv`)** (in `data` folder):

```csv
Transaction ID,Product Name,Sales Region,Sales Amount,Date
1,Product A,North,200,2023-01-01
2,Product B,South,150,2023-01-03
3,Product A,East,300,2023-01-10
4,Product C,West,500,2023-01-15
5,Product B,North,100,2023-01-18
6,Product C,South,400,2023-01-20
7,Product A,West,350,2023-02-01
8,Product B,East,200,2023-02-10
9,Product C,North,450,2023-02-15
10,Product A,South,250,2023-02-18
```

---

### **How to Run the Project**

1. **Clone the repository** to your local machine:
    ```bash
    git clone https://github.com/yourusername/sales-data-analysis.git
    cd sales-data-analysis
    ```

2. **Install the required dependencies**:
    ```bash
    pip install -r requirements.txt
    ```

3. **Run the data analysis script**:
    ```bash
    python scripts/data_analysis.py
    ```

4. **Run the visualization script** to generate the bar charts:
    ```bash
    python scripts/visualize_sales.py
    ```

---


```

---

### **Project Insights:**
This project gives a clear view of how sales performance varies across different products, regions, and time periods. The visualizations help stakeholders quickly assess which products or regions are performing better and identify trends over time.

